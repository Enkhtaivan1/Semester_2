import random

class ProductionRule:
    def __init__(self, head: chr, body: [str]):
        self.head = head
        self.body = body
        
class CFG:
    def __init__(self, rules: [ProductionRule], terminals: [chr], start_symbol: chr):
        self.rules = rules
        self.terminals = terminals
        self.start_symbol = start_symbol

def initializeCFG(grammar: CFG):
    grammar.rules = [
        ProductionRule('S', ["aSa", "bSb", "cSc", "dSd", "eSe", "fSf", "a", "b", "c", "d", "e", "f"]),
        ProductionRule('V', ["aSa", "bSb", "cSc", "dSd", "eSe", "fSf", "a", "b", "c", "d", "e", "f"])]
    grammar.terminals = ["a", "b", "c", "d", "e", "f"]
    grammar.start_symbol = 'S'
    print("The CFG is initialized.")

def findRule(grammar: CFG, symbol: chr):
    for rule in grammar.rules:
        if rule.head == symbol:
            return rule
    return None

def generatePalindrome(grammar: CFG, symbol: chr)->str:
    if symbol in grammar.terminals:
        return symbol
    else:
        rule = findRule(grammar, symbol)
        randomProduction = random.choice(rule.body)
        generatedString = ""
        for char in randomProduction:
            generatedString += generatePalindrome(grammar, char)
        return generatedString

def parseString(grammar: CFG, string: str, symbol: chr):
    if not string:
        return True

    if symbol in grammar.terminals:
        return string[0] == symbol and parseString(grammar, string[1:], symbol)
    else:
        rule = findRule(grammar, symbol)
        for production in rule.body:
            if parseString(grammar, string, production[0]):
                return True
    return False

def testParser(grammar: CFG, numTests: int):
    print("Testing Parser with Random Palindromes:")
    for i in range(1, numTests + 1):
        testPalindrome = generatePalindrome(grammar, grammar.start_symbol)
        print("Test ", i,": Palindrome =",testPalindrome)

        if parseString(grammar, testPalindrome, grammar.start_symbol):
            print("Parser Result: Valid\n")
        else:
            print("Parser Result: Invalid\n")

if __name__ == "__main__":
    grammar = CFG(None, None, None)
    initializeCFG(grammar)

    randomPalindrome = generatePalindrome(grammar, grammar.start_symbol)
    print("Random Palindrome:",randomPalindrome,"\n")

    testParser(grammar, 5)
    
    userInput = input("Enter a string to test if it's a palindrome: ")
    if parseString(grammar, userInput, grammar.start_symbol):
        print("The string is a palindrome generated by the CFG.")
    else:
        print("The string is not a palindrome generated by the CFG.")